<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Causes | Joe Lencioni]]></title>
  <link href="http://joelencioni.com/blog/categories/causes/atom.xml" rel="self"/>
  <link href="http://joelencioni.com/"/>
  <updated>2014-06-18T12:02:39-07:00</updated>
  <id>http://joelencioni.com/</id>
  <author>
    <name><![CDATA[Joe Lencioni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Differentiate Environments <em>with Different Favicons</em>]]></title>
    <link href="http://joelencioni.com/blog/2014/02/19/differentiate-environments-with-different-favicons/"/>
    <updated>2014-02-19T14:04:00-08:00</updated>
    <id>http://joelencioni.com/blog/2014/02/19/differentiate-environments-with-different-favicons</id>
    <content type="html"><![CDATA[<p>Sally has been tasked with making the commenting feature in her company's
webapp be threaded up to 5 levels instead of only 2 levels. As she makes
adjustments to the code, she collects an unprecedented number of browser tabs.
Some of them point at her company's production site, while others point at her
development environment. In many of them, she enabled "super-user" mode, so she
could more freely play with her app while making her changes.</p>

<p>So she goes on coding and messing with the data for most of the afternoon.
She's about ready to wrap up and head home for the evening when her boss walks
in and asks, "Sally, lots of comments have gone missing. Do you know what
happened?" Sally felt like she had swallowed a sack of doorknobs. In the midst
of her coding spree, she mixed up some of her browser tabs and accidentally
deleted live data. A lot of live data.</p>

<!-- more -->


<hr />

<p>At <a href="https://www.causes.com">Causes</a>, I often have a number of tabs open. Much like Sally, many of these
are pointed at my development environment or the production environment. While
I haven't been as unfortunate as Sally and accidentally done something in
production, I noticed that I spent a fair amount of time searching through my
tabs for the one I was looking for. When pairing with my colleagues, I noticed
that they were spending a good amount of time doing the same thing. Although it
wasn't a serious time commitment by any means, it slowed me down regularly.
Sometimes, it was enough of a speed bump that took me out of my flow. I decided
that there must be a way to improve this situation.</p>

<p>The browser gives you two pieces of information in the tab: the page title and
the favicon. This information should provide you with enough context for you to
make a decision as to which tab you want to foist your full attention.</p>

<p>Since page titles are often the same between environments, that's not a very
useful way to differentiate between these types of tabs out of the box. I
considered adding a prefix to the page title in development, as you might see
with subject lines on email lists, but page titles are often hidden when you
have lots of tabs open. Additionally, page titles feel like page-specific
content, and we typically like things like that to be as similar as possible
between development and production.</p>

<p>Then I realized that we could pack this information into our favicon. The
favicon is the perfect place to put this because they are often indicators of a
domain, not a page. Also, favicons are the last piece of information to be
hidden when opening definitely way too many tabs.</p>

<p>I hit the command line and simply inverted the colors on our production favicon
using ImageMagick, added some configuration to our development environment to
use the inverted image, and I was up and running. Now it is much easier to
figure out which tab is the one I am looking for.</p>

<p>In a Rails environment, for example, you can make this magic happen by first
defining a constant in your application configuration that points to the
location of your production favicon file.</p>

<p><code>ruby config/application.rb
FAVICON = 'icons/favicon.png'
</code></p>

<p>And in your development environment configuration, override this constant to
point to a different favicon file:</p>

<p><code>ruby config/environments/development.rb
FAVICON = 'icons/favicon-inverted.png'
</code></p>

<p>Then simply consume the constant in your layouts and you should be good to go.</p>

<p>This quick adjustment is so easy to do and will make you and your team a little
bit faster every single day. It might even prevent some headaches. And, don't
worry about Sallyâ€”thankfully she had only soft-deleted the comments.  All of
the data was easily restored.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Bower with <em>Rails, Sprockets, and the Asset Pipeline</em>]]></title>
    <link href="http://joelencioni.com/blog/2014/01/03/integrating-bower-with-rails/"/>
    <updated>2014-01-03T10:00:00-08:00</updated>
    <id>http://joelencioni.com/blog/2014/01/03/integrating-bower-with-rails</id>
    <content type="html"><![CDATA[<p>We tend to prefer convention over configuration, so when we first began using
<a href="http://bower.io/">Bower</a> to manage our front-end dependencies, we started with minimal
configuration. While this nicely put the files in the expected places, it was a
hassle actually using the assets in our Rails app.</p>

<p>Our basic initial approach was to symlink the assets that we wanted to
reference from the <code>bower_components</code> directory into <code>vendor/assets</code> where
Sprockets would notice them. While this worked in the short term, it was
tedious to set up new packages, and was likely to break if the required assets
were moved when upgrading dependencies.</p>

<p>Ultimately, this felt like a hack. We decided that there must be a better way.
Thankfully there is.</p>

<!-- more -->


<h2>Configuring Bower</h2>

<p>To get us out of the clunky situation of managing symlinks, we first wanted
Bower to store its files in a Railsy location. The right spot for this seemed
to be <code>vendor/assets/bower_components</code>. We chose <code>vendor/assets</code> because these
are third-party assets, and <code>bower_components</code> because it makes clear that
these assets are managed by Bower and shouldn't manually be meddled with.</p>

<p>Bower allows us to configure the directory it stores its files via the
<code>.bowerrc</code> file. Since we didn't have one yet, all we needed to do was add this
as a sibling to our <code>bower.json</code> file, which was in our app root:</p>

<p><code>json .bowerrc
{
  "directory": "vendor/assets/bower_components"
}
</code></p>

<h2>Configuring Rails</h2>

<p>Now that the assets were in a logical place, we wanted Rails to be able to find
them easily without us having to manage an army of symlinks. In our application
config, we have access to the list of paths that Sprockets checks for assets
that are imported in manifests. We simply needed to add the Bower components
path to that list:</p>

<p><code>ruby config/application.rb
config.assets.paths &lt;&lt; Rails.root.join('vendor', 'assets', 'bower_components')
</code></p>

<h2>Using Bower Assets</h2>

<p>Now that we have wired up the critical pieces, we can reference Bower assets in
manifests, and Sprockets will pull them in for us.</p>

<p><code>js Example application.js
//= require my_js_file
//= require bower_component_name/js_file
</code></p>

<p><code>scss Example application.css.scss
@import 'mixins';
@import 'reset';
@import 'bower_component_name/stylesheet'
</code></p>

<p>The assets in <code>vendor/assets/bower_components</code> are not precompiled on their own
so they can only be referenced in manifests and cannot be served directly to
clients. However, we wanted to serve a couple of components individually and
not bundled with other assets in a pre-existing manifest, generally either
because of their size (<a href="http://d3js.org/">D3</a>) or because they were being served only to a subset
of clients (<a href="https://github.com/scottjehl/Respond">Respond</a>). For these cases, we created shim manifests that only
include the single file we want served:</p>

<p><code>js Our shim d3.js manifest
// Shim to coax vendor/assets/bower_components/d3/d3.js to be precompiled by
// the asset pipeline
//= require d3/d3
</code></p>

<h2>Alternatives</h2>

<p>There is a <a href="https://github.com/42dev/bower-rails">bower-rails gem</a> that provides a <acronym title="Domain Specific
Language">DSL</acronym> that allows you to manage Bower components via a
Bowerfile, similarly to how <a href="http://bundler.io/">Bundler</a> operates. Although it sounds pretty
slick, we were hesitant to add another dependency to our stack when the
alternative outlined above requires so little work to configure.</p>

<p>Additionally, <a href="https://rails-assets.org/">https://rails-assets.org</a> can be added as a gem source to your
<code>Gemfile</code>, which allows you to reference Bower packages via <code>gem
'rails-assets-BOWER_PACKAGE_NAME'</code>. We decided against this approach because it
seemed to add an unnecessary layer of indirection when again, the alternative
outlined above is so simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sassy Progressive <em>Enhancement</em>]]></title>
    <link href="http://joelencioni.com/blog/2013/11/29/sassy-progressive-enhancement/"/>
    <updated>2013-11-29T15:50:00-08:00</updated>
    <id>http://joelencioni.com/blog/2013/11/29/sassy-progressive-enhancement</id>
    <content type="html"><![CDATA[<p>A mobile-first approach to design can be good: it helps you focus and
potentially simplify your requirements, which can translate into a better user
experience. Likewise, a mobile-first approach to implementation can be good: it
puts the more expensive tasks on the shoulders of clients that are more likely
to be able to handle the extra load, which can also translate to a better user
experience.</p>

<p>At <a href="https://www.causes.com">Causes</a>, we have been building things with a mobile-first approach both
in terms of design and implementation with a goal of progressive enhancement.
Since switching to this mode on the technical side, we have noticed that our
code is easier to write and more coherent to read, both of which are big
benefits for the engineering team.</p>

<p>So we've put together a little project that helps us write readable media
queries in this way. We call it <a href="https://github.com/causes/sass-enhance">sass-enhance</a>.</p>

<!-- more -->


<h2>sass-enhance In Action</h2>

<p>sass-enhance defines mixins for media queries, <code>enhance</code> and <code>degrade</code>.</p>

<p>These mixins each take a breakpoint as an argument, and a block of styles to
apply when that breakpoint is activated. Optionally, you can specify ranged
breakpoints using <code>until</code>.</p>

<p>Breakpoints can be named, as defined in the <code>$breakpoint-max-widths</code> variable
(e.g. "tablet"), or arbitrary widths (e.g. "720px").</p>

<h3><code>enhance()</code></h3>

<p>The <code>enhance</code> mixin is used to apply styles to a selector as the viewport gets
wider. It can be used to progressively enhance a page. We prefer using
<code>enhance</code> over <code>degrade</code> because it is a mobile-first implementation that tends
to be simpler in its execution.</p>

<p>To adjust the padding from 1em to 2em at the desktop breakpoint and wider, you
could use the following SCSS:</p>

<p>```scss
.my-selector {
  padding: 1em;</p>

<p>  @include enhance(desktop) {</p>

<pre><code>padding: 2em;
</code></pre>

<p>  }
}
```</p>

<p>Which compiles to:</p>

<p>```css
.my-selector {
  padding: 1em;
}</p>

<p>@media screen and (min-width: 960px) {
  .my-selector {</p>

<pre><code>padding: 2em;
</code></pre>

<p>  }
}
```</p>

<p>If you wanted to only apply a different amount of padding for only the tablet
viewport width and nothing wider or narrower, you could use the following SCSS:</p>

<p>```scss
.my-selector {
  padding: 1em;</p>

<p>  @include enhance(tablet until desktop) {</p>

<pre><code>padding: 2em;
</code></pre>

<p>  }
}
```</p>

<p>Which compiles to:</p>

<p>```css
.my-selector {
  padding: 1em;
}</p>

<p>@media screen and (min-width: 641px) and (max-width: 959px) {
  .my-selector {</p>

<pre><code>padding: 2em;
</code></pre>

<p>  }
}
```</p>

<h3><code>degrade()</code></h3>

<p>There are some cases where <code>enhance</code> does not work or make sense. In these
cases, it is okay to use <code>degrade</code> to gracefully degrade the styles as the
viewport gets narrower.</p>

<p>To adjust the padding from 2em to 1em at the tablet breakpoint and narrower,
you could use the following SCSS:</p>

<p>```scss
.my-selector {
  padding: 2em;</p>

<p>  @include degrade(tablet) {</p>

<pre><code>padding: 1em;
</code></pre>

<p>  }
}
```</p>

<p>Note: this produces functionally equivalent styles as the first example.</p>

<p>Likewise, if you wanted to only apply a different amount of padding for only
the tablet viewport width and nothing wider or narrower, you could use the
following SCSS:</p>

<p>```scss
.my-selector {
  padding: 2em;</p>

<p>  @include degrade(tablet until small-tablet) {</p>

<pre><code>padding: 1em;
</code></pre>

<p>  }
}
```</p>

<h2>Installation</h2>

<p>The recommended way to get set up with sass-enhance is via <a href="http://bower.io">Bower</a>, the
front-end package manager. To do this, simply run:</p>

<p><code>bash
bower install sass-enhance
</code></p>

<p>If your project uses Bower to manage its dependencies and you'd like to save
sass-enhance as a dependency in your project's <code>bower.json</code> manifest file, add
the <code>--save</code> option:</p>

<p><code>bash
bower install --save sass-enhance
</code></p>

<p>Once you have the files locally, you simply need to import it so it is
available to your stylesheets. At Causes, we are building a Rails app, so we
<del>symlink sass-enhance into <code>vendor/assets/stylesheets/sass-enhance/</code></del>
have <a href="/blog/2014/01/03/integrating-bower-with-rails/">integrated Bower with Sprockets and the asset pipeline</a>, and
<code>@import</code> it near the top of our SCSS files:</p>

<p><code>scss
@import 'sass-enhance/sass-enhance';
</code></p>

<h2>Configuration</h2>

<p>Although sass-enhance will work just fine right out of the box, you may be
itching to configure it to fit your needs just right. For this purpose, we have
included a variable that you can set, called <code>$breakpoint-max-widths</code>. Just
make sure to set this variable <em>before importing sass-enhance</em> or your settings
will not work.</p>

<p>This variable is a comma separated list of breakpoint names and max-width
pairs. You can choose whatever names and widths you prefer. The default is
something like:</p>

<p>```scss
$breakpoint-max-widths: mobile           360px,</p>

<pre><code>                    mobile-landscape 500px,
                    small-tablet     640px,
                    tablet           959px,
                    desktop          99999px;
</code></pre>

<p>```</p>

<p>So, if you prefer media queries with more generic names, you are free to
configure it to suit your needs:</p>

<p>```scss
$breakpoint-max-widths: small  400px,</p>

<pre><code>                    medium 800px,
                    large  1000px;
</code></pre>

<p>```</p>

<h2>Conclusion</h2>

<p>We hope that you find this tool useful. Pull requests are welcome. <a href="https://github.com/causes/sass-enhance">View the
source on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Showing Color Chips <em>from Sass Variables</em>]]></title>
    <link href="http://joelencioni.com/blog/2013/06/06/showing-color-chips-from-sass-variables/"/>
    <updated>2013-06-06T07:00:00-07:00</updated>
    <id>http://joelencioni.com/blog/2013/06/06/showing-color-chips-from-sass-variables</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.causes.com">Causes</a> we like to make our code more maintainable by building reusable
components. Part of this strategy includes <a href="http://joelencioni.com/blog/2013/03/16/10-easy-ways-to-craft-more-readable-css/#two-or-more-use-a-for">assigning variable names to hex
colors using Sass</a>. This allows us to more easily reuse the same colors
everywhere, which improves consistency and makes it easier to re-color the
entire site when our design needs change.</p>

<p>To increase the visibility of these reusable components, we've been building
out a collection of things that designers and engineers can reference, drop in
to projects, and iterate upon. The code sits next to the rendered version,
allowing people to easily see the implementation required to produce the
result. We call this collection the component gallery. It helps us do more with
less code, be more consistent, and iterate on global changes more easily and
effectively.</p>

<p>When we started fleshing out the color variables we wanted to use throughout
the site, it seemed natural to show these colors in the component gallery as
Pantone color chips. That way, designers could reference the colors that we are
using, we'd have a single place to see that all of the colors look great next
to each other, and engineers could easily pluck variable names when
implementing designs to match the mocks.</p>

<p><img class="fancy" src="/assets/2013-06-06-pantone-chips.png"></p>

<!-- more -->


<p>The quick solution would have had us defining these colors in two places: once
in Sass, where we actually need to use them, and again in Ruby, where we want
to render them on a page. However, we sensed that this would be a pain to
maintain and the two different definitions would quickly fall out of sync.</p>

<p>To resolve these issues, we decided to move our color variables into their own
Sass partial, and use Sass to parse it to display the colors and their
variables. Since we like to use <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">functions like <code>darken()</code>, <code>lighten()</code>, and
<code>scale-color()</code></a>, we needed a solution that would actually execute the Sass
and use the result.</p>

<p>So we built a <a href="http://sass-lang.com/docs/yardoc/Sass/Tree/Visitors/Base.html">Sass Visitor</a> to evaluate variables and return pairs of names
and values:</p>

<p>```ruby
class SassVariableEvaluator &lt; Sass::Tree::Visitors::Base
  def visit_comment(node)</p>

<pre><code># prevents empty arrays from being in the returned array
</code></pre>

<p>  end</p>

<p>  def visit_variable(node)</p>

<pre><code>@environment ||= Sass::Environment.new
value = node.expr.perform(@environment)
@environment.set_local_var(node.name, value)
[node.name, value]
</code></pre>

<p>  end
end
```</p>

<p>Then we have our <code>SassVariableEvaluator</code> visitor evaluate the variables in our
colors Sass partial:</p>

<p><code>ruby
def color_variables
  engine = Sass::Engine.for_file('path/to/_colors.css.scss', syntax: :scss)
  SassVariableEvaluator.visit(engine.to_tree).compact
end
</code></p>

<p>Looping over those evaluated variables in our view generates the desired
markup:</p>

<p>```haml
.clearfix
  - color_variables.each do |name, value|</p>

<pre><code>.pantone
  .chip{ style: "background-color: #{value};" }
  %var $#{name}
</code></pre>

<p>```</p>

<p>And style them nicely:</p>

<p>```sass
.pantone {
  @include box-sizing(border-box);
  @include box-shadow(0 0 5px rgba(0, 0, 0, .1));
  border: 1px solid #eee;
  float: left;
  font-size: 11px;
  margin: 0 2% 2% 0;
  width: 23%;</p>

<p>  &amp;:nth-child(4n) {</p>

<pre><code>margin-right: 0;
</code></pre>

<p>  }</p>

<p>  .chip {</p>

<pre><code>background: #f00;
height: 0;
padding-top: 100%; // height based on width (square)
</code></pre>

<p>  }</p>

<p>  var {</p>

<pre><code>display: block;
font-style: normal;
font-weight: bold;
height: 40px;
padding: .75em;
</code></pre>

<p>  }
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with <em>Asynchronously Loaded JavaScript Objects</em>]]></title>
    <link href="http://joelencioni.com/blog/2013/05/28/working-with-asynchronously-loaded-javascript-objects/"/>
    <updated>2013-05-28T14:00:00-07:00</updated>
    <id>http://joelencioni.com/blog/2013/05/28/working-with-asynchronously-loaded-javascript-objects</id>
    <content type="html"><![CDATA[<p>Telling browsers to load large JavaScripts asynchronously can significantly
improve performance. This prevents the browser from blocking the rendering of
the page, allowing it to be viewed more quickly. However, if you are loading
dependent files asynchronously, such as a third-party service's API, making the
scripts work together is not automatic.</p>

<p>At <a href="http://www.causes.com">Causes</a> we use Facebook's large (nearly 60 <abbr
title="Kibibytes">KiB</abbr> gzipped) JavaScript API on our pages. Although
<a href="https://developers.facebook.com/docs/javascript/gettingstarted/#loading">they recommend loading it asynchronously</a>, we were already
putting our JavaScript at the bottom of the page and weren't convinced that
async would give us much additional benefit. However, after some non-scientific
performance tests it appeared that switching to asynchronously loading the
Facebook API could reduce the time to <code>DOMContentLoaded</code> by nearly a full
second on our pages.</p>

<!-- more -->


<p>After the Facebook API has been loaded asynchronously, it executes
<code>window.fbAsyncInit</code>, which is where <a href="https://developers.facebook.com/docs/reference/javascript/#loading">they suggest</a> placing
code that depends on the <code>FB</code>.</p>

<p>The trouble is, we wanted our JavaScript that interacts with the Facebook API
to continue to work even though it is dispersed throughout our scripts, and it
may execute before the API was available.</p>

<p>The <a href="http://stackoverflow.com/questions/3548493/how-to-detect-when-facebooks-fb-init-is-complete">answers on StackOverflow</a> may work, but they feel inelegant. For
instance, <a href="http://stackoverflow.com/a/3549043/18986">one answer</a> addresses this problem by setting a flag to true
in the <code>fbAsyncInit</code> callback, and creates a <code>fbEnsureInit</code> method that uses a
recursive timeout to poll the flag.</p>

<p>We decided to take a different approach. Thankfully, the Facebook API sets up a
single object, <code>FB</code>, for developers to interact with.</p>

<p>So we developed a class, <code>MethodProxy</code>, to act as a proxy between the rest of
our code and the <code>FB</code> object. It accepts an object to forward calls onto, and
it masquerades as an Array by implementing a <code>push</code> method. The <code>push</code> method
accepts a single argument of a array whose first position is always a string of
the method name on the <code>FB</code> object to be executed, followed by as many
arguments to be given to that method.</p>

<p>```javascript MethodProxy.push()
// payload : ['methodName', arguments*]
this.push = this.forward = function(payload) {
  var methodName = payload.shift().split('.'),</p>

<pre><code>  object     = this.object,
  method;
</code></pre>

<p>  while (methodName.length) {</p>

<pre><code>// dig into the object as many levels as needed (e.g. `FB.XFBML.parse`)
if (method) {
  object = object[method];
}
method = methodName.shift();
</code></pre>

<p>  }
  return object[method].apply(object, payload);
};
```</p>

<p>This allows us to initialize a native Array when the page loads to collect
calls to Facebook's API. Then, in the <code>fbAsyncInit</code> callback, we Indiana Jones
style swap out the native array with an instantiation of our <code>MethodProxy</code>
object, which then consumes the queued events by executing them on the <code>FB</code>
object. The end result is a consistent API for our code to use regardless of
the state of Facebook's asynchronously loaded API.</p>

<p>```javascript
MyFB = window.MyFB || [];</p>

<p>MyFB.push(['ui', ...]);</p>

<p>window.fbAsyncInit = function() {
  FB.init({</p>

<pre><code>...
</code></pre>

<p>  });</p>

<p>  MyFB = new MethodProxy(FB, MyFB);
};</p>

<p>MyFB.push(['FBML.parse', ...]);
```</p>

<p><code>MethodProxy</code> is general enough to be used for other similar cases so we've
released it as <a href="https://github.com/causes/method-proxy-js">method-proxy-js, an open source project</a> under
the MIT license and packaged it up for <code>npm</code>. Installing is as easy as <code>npm
install method-proxy-js</code>.</p>
]]></content>
  </entry>
  
</feed>
